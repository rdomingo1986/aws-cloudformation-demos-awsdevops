---
AWSTemplateFormatVersion: 2010-09-09
Description: Lab for custom resource lambda
Parameters:
    SourceAccessCIDR:
      Type: String
      Description: The CIDR IP range that is permitted to access the instance. We recommend that you set this value to a trusted IP range.
      Default: 0.0.0.0/0
    SSHKeyName:
      Type: String
      Description: The name of the key that will be created
      Default: MyKey01
    VPCPublicSubnet:
      Type: AWS::EC2::Subnet::Id
      Description: Choose a public subnet in the selected VPC
    VPC:
      Type: AWS::EC2::VPC::Id
      Description: The VPC in which to launch the EC2 instance. We recommend you choose your default VPC.
    FunctionArn:
      Type: String
      Description: The ARN of the lambda function that implements the custom resource
    LatestAmiId:
      Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
      Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Resources:
  LambdaCustomResourceRole: 
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaCustomResourceRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: InlinePolicyOne
          PolicyDocument:
            Statement:
              - Sid: LambdaInlineStatement
                Effect: Allow
                Action: 
                  - ec2:CreateKeyPair
                  - ec2:DescribeKeyPairs
                  - ssm:PutParameter
                  - ec2:DeleteKeyPair
                  - ssm:DeleteParameter
                Resource:
                  - "*"
  LambdaCustomResource:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        ZipFile: |
          var AWS = require('aws-sdk');

          var sns = new AWS.SNS({
            region: 'us-west-2'
          });

          var codepipeline = new AWS.CodePipeline({
            region: 'us-west-2'
          });

          exports.handler = (event, context, callback) => {
              var jobId = event["CodePipeline.job"].id;
              
              sns.publish({
                TopicArn: 'arn:aws:sns:us-west-2:864613434505:awsdevops-demonotifications',
                Message: 'Se ha iniciado una compilaci√≥n \n' + JSON.stringify(event),
                Subject: 'Building in process'
              }, function (err, response) {
                if (err) return console.log(err);
                console.log(response);
                codepipeline.putJobSuccessResult({ jobId: jobId }, function(err, data) {
                    if(err) {
                        context.fail(err);      
                    } else {
                        context.succeed();      
                    }
                });
              });
          }; 
      FunctionName: awsdevops-democodepipeline
      Handler: index.handler
      MemorySize: 128
      PackageType: Zip
      Role: !GetAtt LambdaCustomResourceRole.Arn
      Runtime: python
      Tags: 
        - Key: Course
          Value: AWSDEVOPS
      Timeout: 3
  SSHKeyCR:
      Type: Custom::CreateSSHKey
      Version: "1.0"
      Properties:
        ServiceToken: !Ref FunctionArn
        KeyName: !Ref SSHKeyName
  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref SSHKeyName
      InstanceType: t2.micro
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref EC2InstanceProfile
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - Ref: EC2InstanceSG
          SubnetId:
            Ref: VPCPublicSubnet
      Tags:
        -
          Key: Name
          Value: Cfn-Workshop-Reinvent-2018-Lab1
    DependsOn: SSHKeyCR
  EC2InstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        Roles:
        - Ref: EC2InstanceRole
        Path: "/"
      DependsOn: EC2InstanceRole
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
      - PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - s3:GetObject
            Resource: "*"
            Effect: Allow
        PolicyName: s3-policy
      - PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - logs:CreateLogStream
            - logs:GetLogEvents
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            - logs:PutRetentionPolicy
            - logs:PutMetricFilter
            - logs:CreateLogGroup
            Resource:
            - arn:aws:logs:*:*:*
            - arn:aws:s3:::*
            Effect: Allow
        PolicyName: cloudwatch-logs-policy
      - PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - ec2:AssociateAddress
            - ec2:DescribeAddresses
            Resource:
            - "*"
            Effect: Allow
        PolicyName: eip-policy
      Path: "/"
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Principal:
            Service:
            - ec2.amazonaws.com
          Effect: Allow
        Version: '2012-10-17'
  EC2InstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: This should allow you to SSH to the instance from your location
        VpcId: !Ref VPC
        Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}
        SecurityGroupIngress:
          -
            Description: This should allow you to SSH from your location into an EC2 instance
            CidrIp: !Ref SourceAccessCIDR
            FromPort: 22
            IpProtocol: tcp
            ToPort: 22
Outputs:
  MyEC2InstanceDNSName:
    Description: The DNSName of the new EC2 instance
    Value: !GetAtt MyEC2Instance.PublicDnsName
  MyEC2InstancePublicIP:
    Description: The Public IP address of the newly created EC2 instance 
    Value: !GetAtt MyEC2Instance.PublicIp
